#include <iostream>
#include <bitset>
#include <vector>

using namespace std;

// Initial permutation table
const int IP[] = {2, 6, 3, 1, 4, 8, 5, 7};

// Inverse initial permutation table
const int IP_INV[] = {4, 1, 3, 5, 7, 2, 8, 6};

// Permuted choice 1 table
const int PC1[] = {3, 5, 2, 7, 4, 10, 1, 9, 8, 6};

// Permuted choice 2 table
const int PC2[] = {6, 3, 7, 4, 8, 5, 10, 9};

// Left circular shift table
const int LS[] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};

// Initial permutation
bitset<8> initialPermutation(bitset<8> plaintext) {
    bitset<8> result;
    for (int i = 0; i < 8; ++i) {
        result[i] = plaintext[IP[i] - 1];
    }
    return result;
}

// Inverse initial permutation
bitset<8> inverseInitialPermutation(bitset<8> ciphertext) {
    bitset<8> result;
    for (int i = 0; i < 8; ++i) {
        result[i] = ciphertext[IP_INV[i] - 1];
    }
    return result;
}

// Permute key using PC1 table
bitset<8> permuteKey(bitset<8> key) {
    bitset<8> result;
    for (int i = 0; i < 10; ++i) {
        result[i] = key[PC1[i] - 1];
    }
    return result;
}

// Left circular shift operation
bitset<8> leftCircularShift(bitset<8> bits, int shift) {
    return (bits << shift) | (bits >> (8 - shift));
}

// Generate subkeys
vector<bitset<8>> generateSubkeys(bitset<8> key) {
    vector<bitset<8>> subkeys;
    bitset<8> permutedKey = permuteKey(key);
    bitset<8> mask(0x0F);  // Mask for extracting the lower 4 bits
    bitset<8> left = permutedKey >> 4;
    bitset<8> right = permutedKey & mask;  // Apply the mask
    for (int i = 0; i < 16; ++i) {
        left = leftCircularShift(left, LS[i]);
        right = leftCircularShift(right, LS[i]);
        bitset<8> subkey = (left << 4) | right;
        subkeys.push_back(subkey);
    }
    return subkeys;
}

int main() {
    // Input plaintext and key
    bitset<8> plaintext(0b00110101); // 8-bit plaintext
    bitset<8> key(0b00110000);       // 8-bit key

    // Generate subkeys
    vector<bitset<8>> subkeys = generateSubkeys(key);

    // Encryption
    bitset<8> encrypted = initialPermutation(plaintext);
    cout << "Encrypted: " << encrypted << endl;

    // Decryption
    bitset<8> decrypted = inverseInitialPermutation(encrypted);
    cout << "Decrypted: " << decrypted << endl;

    return 0;
}
